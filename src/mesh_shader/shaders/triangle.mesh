#version 460 core
#extension GL_EXT_mesh_shader : enable
#extension GL_ARB_separate_shader_objects : enable

layout (local_size_x=1, local_size_y=1, local_size_z=1) in; // Typical limit: 128 invocations.
layout (triangles) out;                                     // May also be points or lines.
layout (max_vertices=3, max_primitives=1) out;              // Typical limit: 256 vert/prim.

// layout (location=0) out vec4 out0[];                        // Per-vertex.
// layout (location=1) perprimitiveEXT out vec4 out1[];        // Per-primitive.

layout (location=0) out vec3 fragColor[];                   // Per-vertex.

layout(push_constant) uniform constants
{
	vec4 data;
	mat4 mvp_matrix;
} PushConstants;

vec3 positions[3] = vec3[](vec3(0.0, -0.5, 0.0), vec3(0.5, 0.5, 0.0), vec3(-0.5, 0.5, 0.0));
vec3 colors[3]    = vec3[](vec3(1.0,  0.0, 0.0), vec3(0.0, 1.0, 0.0), vec3( 0.0, 0.0, 1.0));

struct TaskData {
	uvec3 taskDispatchId;
};
taskPayloadSharedEXT TaskData td;

void main ()
{
	SetMeshOutputsEXT(3, 1);

	// vertex
	for (int vertIdx = 0; vertIdx < 3; vertIdx++)
	{
		gl_MeshVerticesEXT[vertIdx].gl_Position = PushConstants.mvp_matrix * vec4(positions[vertIdx], 1.0);
		fragColor[vertIdx]                      = colors[vertIdx];
	}

	// primitive
	{
		gl_PrimitiveTriangleIndicesEXT[0] = uvec3(0, 1, 2);
	}
}


/*
// write only access
out uint gl_PrimitivePointIndicesEXT[];
out uvec2 gl_PrimitiveLineIndicesEXT[];
out uvec3 gl_PrimitiveTriangleIndicesEXT[];
// write only access
out gl_MeshPerVertexEXT {
    vec4 gl_Position;
    float gl_PointSize;
    float gl_ClipDistance[];
    float gl_CullDistance[];
} gl_MeshVerticesEXT[];
// write only access
perprimitiveEXT out gl_MeshPerPrimitiveEXT {
    int gl_PrimitiveID;
    int gl_Layer;
    int gl_ViewportIndex;
    bool gl_CullPrimitiveEXT;
    int gl_PrimitiveShadingRateEXT;
} gl_MeshPrimitivesEXT[];
*/
